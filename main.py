import requests
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤
coins = {
    "1": ("Bitcoin", "bitcoin"),
    "2": ("Ethereum", "ethereum"),
    "3": ("Solana", "solana"),
    "4": ("Toncoin", "the-open-network"),
    "5": ("Dogecoin", "dogecoin"),
}

# –ú–µ–Ω—é
print("–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:")
for k, v in coins.items():
    print(f"{k}. {v[0]}")

choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ")

if choice not in coins:
    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
    exit()

coin_name, coin_id = coins[choice]
print(f"\nüìà –í–∏ –æ–±—Ä–∞–ª–∏: {coin_name}\n")

# 1. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
params = {"vs_currency": "usd", "days": "90"}
response = requests.get(url, params=params)
data = response.json()

# 2. –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ DataFrame
prices = pd.DataFrame(data["prices"], columns=["timestamp", "price"])
volumes = pd.DataFrame(data["total_volumes"], columns=["timestamp", "volume"])
df = pd.merge(prices, volumes, on="timestamp")
df["date"] = pd.to_datetime(df["timestamp"], unit='ms')
df = df[["date", "price", "volume"]]

# 3. –û–∑–Ω–∞–∫–∏
df["price_change"] = df["price"].pct_change()  # % –∑–º—ñ–Ω–∏
df["target"] = df["price_change"].shift(-1) > 0  # —á–∏ –∑—Ä–æ—Å—Ç–µ –∑–∞–≤—Ç—Ä–∞?
df.dropna(inplace=True)

# 4. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
X = df[["price_change", "volume"]]
y = df["target"].astype(int)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
model = RandomForestClassifier()
model.fit(X_train, y_train)

# 5. –û—Ü—ñ–Ω–∫–∞
y_pred = model.predict(X_test)
print("–¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ:", accuracy_score(y_test, y_pred))

# 6. –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–Ω—è
last_row = df.iloc[-1:][["price_change", "volume"]]
pred = model.predict(last_row)
print("üí∏ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: üî∫ –∑—Ä–æ—Å—Ç–µ" if pred[0] else "üìâ –≤–ø–∞–¥–µ")
